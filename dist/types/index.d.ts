// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   ../rxjs/Subject
//   ../rxjs/Observable
//   ../rxjs/Subscription

declare module 'zaojiu-player' {
    import { ZaojiuPlayer } from "zaojiu-player/player";
    export * from "zaojiu-player/model";
    export default ZaojiuPlayer;
}

declare module 'zaojiu-player/player' {
    import { VideoPlayer } from "zaojiu-player/video";
    import { Language, Option, PlayerEvent } from "zaojiu-player/model";
    import { BaseElement } from "zaojiu-player/interface";
    import { Controls } from "zaojiu-player/controls";
    import { Subject } from "rxjs/Subject";
    import 'rxjs/add/operator/filter';
    import { Observable } from "rxjs/Observable";
    export class ZaojiuPlayer implements BaseElement {
        el: HTMLElement;
        video: VideoPlayer;
        controls: Controls;
        eventSource: Subject<PlayerEvent>;
        event$: Observable<PlayerEvent>;
        option: Option;
        language: Language;
        static FlashVideo?: any;
        static use(plugin: any): void;
        constructor(option: Option | any);
        render(): void;
        destroy(): void;
    }
}

declare module 'zaojiu-player/model' {
    export class FullScreenApi {
        requestFullscreen: () => void;
        exitFullscreen: () => void;
        fullscreenElement: HTMLElement;
        fullscreenEnabled: boolean;
    }
    export enum PlayerEventType {
        SourceChange = "sourcechange",
        RetryPlay = "retryplay",
    }
    export class PlayerEvent {
        type: PlayerEventType | string;
        detail: any;
        constructor(type: PlayerEventType | string, detail: any);
    }
    export class VideoSourceChangeEventDetail {
        srcArray: (SourceOption | MediaSource)[];
        currentIndex: number;
        constructor(srcArray: (SourceOption | MediaSource)[], currentIndex: number);
    }
    export class ControlsOption {
        showBigPlay: boolean;
        showPlayPause: boolean;
        showProgressBar: boolean;
        showVolume: boolean;
        showDuration: boolean;
        showFullScreen: boolean;
        showQuality: boolean;
        constructor(showBigPlay?: boolean, showPlayPause?: boolean, showProgressBar?: boolean, showDuration?: boolean, showVolume?: boolean, showQuality?: boolean, showFullScreen?: boolean);
        readonly hasControls: boolean;
        readonly hasToolBarControls: boolean;
    }
    export class SourceOption {
        src: string;
        quality: string;
        minetype: string;
        constructor(src: string, quality: string, mimeType: string);
    }
    export class Option {
        element: string | HTMLElement;
        playList: (SourceOption | MediaSource)[][];
        autoplay: boolean;
        preload: string;
        loop: boolean;
        controls: boolean | ControlsOption;
        swf: string;
        constructor(element: string | HTMLElement, playList: string | MediaSource | SourceOption | (string | MediaSource | SourceOption)[] | (string | SourceOption | MediaSource)[][], autoplay?: boolean, preload?: string, loop?: boolean, controls?: boolean | ControlsOption, swf?: string);
    }
    export const languageDict: {
        [key: string]: {
            [key: string]: string;
        };
    };
    export class Language {
        dict: {
            [key: string]: string;
        };
        constructor(lang: string, dict?: {
            [key: string]: string;
        });
        use(lang: string, dict?: {
            [key: string]: string;
        }): void;
        translate(string: string): string;
    }
    export enum ReadyState {
        HAVE_NOTHING = 0,
        HAVE_METADATA = 1,
        HAVE_CURRENT_DATA = 2,
        HAVE_FUTURE_DATA = 3,
        HAVE_ENOUGH_DATA = 4,
    }
    export enum NetworkState {
        NETWORK_EMPTY = 0,
        NETWORK_IDLE = 1,
        NETWORK_LOADING = 2,
        NETWORK_NO_SOURCE = 3,
    }
    export class PlayerError {
        code: MediaErrorCode;
        constructor(code: MediaErrorCode);
    }
    export enum MediaErrorCode {
        MEDIA_ERR_ABORTED = 1,
        MEDIA_ERR_NETWORK = 2,
        MEDIA_ERR_DECODE = 3,
        MEDIA_ERR_SRC_NOT_SUPPORTED = 4,
    }
    export enum VideoErrorType {
        EnvError = 1,
        VideoSourceError = 2,
        NetworkError = 3,
        VideoDecodeError = 4,
        LiveFinish = 5,
        CrossDomainError = 6,
        Others = 7,
    }
    export class FlashBuffer {
        start: number;
        end: number;
        constructor(start: number, end: number);
    }
    export class FlashTimeRanges {
        buffer: FlashBuffer[];
        constructor(buffer: FlashBuffer | FlashBuffer[]);
        readonly length: number;
        start(index: number): number;
        end(index: number): number;
    }
}

declare module 'zaojiu-player/video' {
    import { BaseElement, VideoElement } from 'zaojiu-player/interface';
    import { PlayerEvent, Option, SourceOption } from 'zaojiu-player/model';
    import { Observable } from "rxjs/Observable";
    import { Subject } from "rxjs/Subject";
    import 'rxjs/add/operator/first';
    export class VideoPlayer {
        el: VideoElement;
        containerEl: HTMLElement;
        currentIndex: number;
        srcArray: (SourceOption | MediaSource)[];
        constructor(container: BaseElement, opt: Option, eventSource: Subject<PlayerEvent>, event$: Observable<PlayerEvent>);
        setSrc(playList: (SourceOption | MediaSource)[][]): void;
        getSrc(): (SourceOption | MediaSource)[];
        switchSrc(index: number): void;
        render(): void;
        destroy(): void;
    }
}

declare module 'zaojiu-player/interface' {
    import { NetworkState, PlayerError, ReadyState, SourceOption } from "zaojiu-player/model";
    import { FlashVideo } from "zaojiu-player/flash";
    export interface BaseElement {
        el: HTMLElement;
        render(): void;
        destroy(): void;
    }
    export interface VideoElement {
        readonly networkState: NetworkState;
        readonly readyState: ReadyState;
        readonly paused: boolean;
        readonly ended: boolean;
        readonly error: PlayerError;
        readonly duration: number;
        readonly buffered: TimeRanges;
        autoplay: boolean;
        preload: string;
        loop: boolean;
        src: string | MediaSource | SourceOption;
        volume: number;
        currentTime: number;
        seeking: boolean;
        play(): void;
        pause(): void;
        remove(): void;
        canPlayType(minetype: string): string;
        addEventListener(type: string, listener?: any, useCapture?: boolean): void;
        removeEventListener(type: string, listener?: any, useCapture?: boolean): void;
    }
    export interface FlashElement extends HTMLElement {
        vjs_getProperty: (prop: any) => any;
        vjs_setProperty: (prop: any, value: any) => void;
        vjs_play: () => void;
        vjs_pause: () => void;
        vjs_load: () => void;
        vjs_src: (src: string) => void;
        instance: FlashVideo;
    }
}

declare module 'zaojiu-player/controls' {
    import { BaseElement } from "zaojiu-player/interface";
    import { PlayerEvent, FullScreenApi, Language, Option } from "zaojiu-player/model";
    import { ZaojiuPlayer } from "zaojiu-player/player";
    import { Subscription } from "rxjs/Subscription";
    import { Observable } from "rxjs/Observable";
    import { Subject } from "rxjs/Subject";
    import { VideoPlayer } from "zaojiu-player/video";
    export class BigPlayBtnControl implements BaseElement {
        el: HTMLElement;
        constructor(container: BaseElement, video: VideoPlayer, event$: Observable<PlayerEvent>);
        render(): void;
        destroy(): void;
    }
    export class ErrorControl implements BaseElement {
        el: HTMLElement;
        constructor(container: BaseElement, video: VideoPlayer, lang: Language, event$: Observable<PlayerEvent>, eventSource: Subject<PlayerEvent>);
        render(): void;
        destroy(): void;
    }
    export class LoadingControl implements BaseElement {
        el: HTMLElement;
        constructor(container: BaseElement, video: VideoPlayer, event$: Observable<PlayerEvent>, eventSource: Subject<PlayerEvent>);
        bindEvent(): void;
        setLoadingMonitor(): void;
        render(): void;
        destroy(): void;
    }
    export class PlayPauseBtnControl implements BaseElement {
        el: HTMLElement;
        constructor(container: BaseElement, video: VideoPlayer, event$: Observable<PlayerEvent>);
        toggle(): void;
        render(): void;
        destroy(): void;
    }
    export class ProgressBarControl implements BaseElement {
        el: HTMLElement;
        constructor(container: BaseElement, video: VideoPlayer, event$: Observable<PlayerEvent>);
        render(): void;
        destroy(): void;
    }
    export class CurrentTimeControl implements BaseElement {
        el: HTMLElement;
        constructor(container: BaseElement, video: VideoPlayer, event$: Observable<PlayerEvent>);
        render(): void;
        destroy(): void;
    }
    export class DurationControl implements BaseElement {
        el: HTMLElement;
        constructor(container: BaseElement, video: VideoPlayer, event$: Observable<PlayerEvent>);
        render(): void;
        destroy(): void;
    }
    export class VolumeControl implements BaseElement {
        el: HTMLElement;
        constructor(container: BaseElement, video: VideoPlayer, event$: Observable<PlayerEvent>);
        render(): void;
        destroy(): void;
    }
    export class QualityControl implements BaseElement {
        el: HTMLElement;
        constructor(container: BaseElement, opt: Option, video: VideoPlayer, lang: Language, event$: Observable<PlayerEvent>);
        render(): void;
        destroy(): void;
    }
    export class FullScreenControl implements BaseElement {
        el: HTMLElement;
        fullScreenApi: FullScreenApi;
        constructor(container: BaseElement, video: VideoPlayer, player: ZaojiuPlayer, event$: Observable<PlayerEvent>);
        toggle(): void;
        render(): void;
        destroy(): void;
    }
    export class ToolBarControl implements BaseElement {
        el: HTMLElement;
        playPauseBtn: PlayPauseBtnControl;
        progressBar: ProgressBarControl;
        volume: VolumeControl;
        quality: QualityControl;
        duration: DurationControl;
        currentTime: CurrentTimeControl;
        fullScreen: FullScreenControl;
        constructor(container: BaseElement, option: Option, video: VideoPlayer, player: ZaojiuPlayer);
        slideUp(): void;
        slideDown(): void;
        render(): void;
        destroy(): void;
    }
    export class Controls implements BaseElement {
        el: HTMLElement;
        bigPlayBtn: BigPlayBtnControl;
        loading: LoadingControl;
        error: ErrorControl;
        toolBar: ToolBarControl;
        mouseMoveTimer: any;
        event$: Observable<PlayerEvent>;
        eventSub: Subscription;
        constructor(container: BaseElement, option: Option, video: VideoPlayer, player: ZaojiuPlayer, event$: Observable<PlayerEvent>);
        render(): void;
        destroy(): void;
    }
}

declare module 'zaojiu-player/flash' {
    import { FlashTimeRanges, NetworkState, Option, PlayerError, ReadyState, SourceOption } from "zaojiu-player/model";
    import { FlashElement, VideoElement } from "zaojiu-player/interface";
    export class FlashVideo implements VideoElement {
        el: FlashElement;
        error: PlayerError;
        static onReady(swfID: string): void;
        static onEvent(swfID: string, eventName: string, ...args: any[]): void;
        static onError(swfID: string, err: any): void;
        static canPlayType(type: string): string;
        constructor(opt: Option);
        load(): void;
        play(): void;
        pause(): void;
        canPlayType(type: string): string;
        readonly seeking: boolean;
        readonly duration: number;
        readonly seekable: FlashTimeRanges;
        readonly buffered: FlashTimeRanges;
        readonly ended: boolean;
        readonly paused: boolean;
        readonly networkState: NetworkState;
        readonly readyState: ReadyState;
        src: SourceOption;
        currentTime: number;
        autoplay: boolean;
        preload: string;
        loop: boolean;
        volume: number;
        muted: boolean;
        defaultMuted: boolean;
        playbackRate: number;
        defaultPlaybackRate: number;
        poster: string;
        rtmpConnection: string;
        rtmpStream: string;
        addEventListener(type: string, listener?: any, useCapture?: boolean): void;
        removeEventListener(type: string, listener?: any, useCapture?: boolean): void;
        handleEvent(eventName: string, args: any): void;
        handleReady(): void;
        handleError(err: string): void;
        remove(): void;
    }
    export default FlashVideo;
}

